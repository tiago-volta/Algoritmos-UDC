INFORME PRACTICA 1 ALGORITMOS
-----------------------------

******NOMBRES********
--------------------

Matías Alberto González Aliendre
Pablo Jesús Herrero Díaz
Tiago Da Costa Teixeira Veloso e Volta

SUCESION DE FIBONACCI
---------------------

****INTRODUCCION*****
--------------------

En esta primera practica de algoritmos desarrollamos y analizamos tres
algoritmos que calculan el n-esimo numero de la sucesión de Fibonacci de
forma computacional y de manera empírica el análisis teórico.

****MAQUINA*******
------------------

Procesador: AMD Ryzen 5 4600H
Memoria: 16,0 GB
Modelo del Sistema: HP Pavilon Gaming Laptop 15-ec1xxx
Arquitectura: x86-64
Sistema Operativo: Ubuntu 22.04.5 LTS
Kernel: Linux 6.8.0-40-generic
Capacidad Disco: 408 Gb

UNIDADES DE TIEMPO UTILIZADAS
-----------------------------

En este informe los tiempos de ejecución de los algoritmos se midieron en microsegundos.
Para garantizar la precisión de las mediciones, se estableció un umbral de confianza de 
500 microsegundos, si el tiempo de ejecución es menor el algoritmo se repite k veces y 
se obtiene el promedio dividiendo el tiempo total entre las ejecuciones. Los casos donde
se aplicó este procedimiento están marcados con un asterisco en las tablas.

   ***** Test Fibonacci*****
   -------------------------

n      fib1    fib2    fib3
----    ----    ----    ----
1       1       1       1
2       1       1       1
3       2       2       2
4       3       3       3
5       5       5       5
6       8       8       8
7       13      13      13
8       21      21      21
9       34      34      34
10      55      55      55
11      89      89      89
12      144     144     144
13      233     233     233
14      377     377     377
15      610     610     610
16      987     987     987
17      1597    1597    1597
18      2584    2584    2584
19      4181    4181    4181
20      6765    6765    6765


******TABLAS******
------------------


Algoritmo fibonacci 1

            n            t(n)          t(n)/1.1^n   t(n)/((1+sqrt(5))/2)^n   t(n)/2^n
*           2           0.0126          0.010372          0.004794          0.00313750
*           4           0.0321          0.021932          0.004685          0.00200687
*           8           0.2370          0.110576          0.005045          0.00092590
*          16          11.2457          2.447401          0.005095          0.00017160
           32       24805.0000       1174.825343          0.005093          0.00000578


1.1^n es la cota subestimada
(1+sqrt(5))/2)^n es la cota ajustada y la Cte = 0.005
2^n es la cota sobreestimada


Algoritmo fibonacci 2

           n             t(n)          t(n)/n^0.8          t(n)/n         t(n)/n*log(n)
*        1000           3.8190          0.015204          0.003819          0.00055286
*       10000          37.8820          0.023902          0.003788          0.00041130
*      100000         378.2030          0.037820          0.003782          0.00032850
      1000000        3795.0000          0.060147          0.003795          0.00027469
     10000000       38589.0000          0.096931          0.003859          0.00023941


n^0.8 es la cota subestimada
n es la cota ajustada y la Cte = 0.0038
n*log(n) es la cota sobreestimada


Algoritmo fibonacci 3

           n             t(n)      t(n)/sqrt(log(n))     t(n)/log(n)        t(n)/n^0,5
*        1000           0.0612          0.023285          0.008860          0.00193531
*       10000           0.0812          0.026756          0.008816          0.00081200
*      100000           0.1032          0.030415          0.008964          0.00032635
*     1000000           0.1200          0.032285          0.008686          0.00012000
*    10000000           0.1408          0.035071          0.008736          0.00004452

sqrt(log(n)) es la cota subestimada
log(n) es la cota ajustada y la Cte = 0.0088
n^0,5 es la cota sobreestimada


****CONCLUSIONES****
--------------------

Fibonacci 1: Se trata del algoritmo menos eficiente debido a su complejidad exponencial.
	     A medida que el valor de n aumenta, los tiempos de ejecución del algoritmo
	     incrementan , el tiempo de ejecución se vuelve considerablemente más alto 
             en comparación con los otros algoritmos.

Fibonacci 2: Mejora respecto al primer algoritmo debido a su complejidad lineal. 
             Los tiempos son más manejables y las cotas analizadas siguen un 
             comportamiento teórico.

Fibonacci 3: Se trata del algoritmo más eficiente, con una complejidad de O(log(n))
             Los tiempos de ejecución son casi constantes para los valores de n 
             evaludados.

En general, los resultdados empíricos muestran una clara diferencia en la eficencia de los
tres algoritmos destacando  Fibonacci 3 como el  algoritmo más eficiente en cuanto a tiempo 
de ejecución y para valores grandes de n.
